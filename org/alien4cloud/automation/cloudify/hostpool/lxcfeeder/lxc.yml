tosca_definitions_version: alien_dsl_1_4_0

metadata:
  template_name: org.alien4cloud.automation.cloudify.hostpool.lxcfeeder
  template_version: 1.4.0-SNAPSHOT
  template_author: alien4cloud

imports:
  - tosca-normative-types:1.0.0-ALIEN14

node_types:
  org.alien4cloud.automation.cloudify.hostpool.lxcfeeder.nodes.LXCHostpoolFeeder:
    derived_from: tosca.nodes.SoftwareComponent
    description: |
      Feed a hostpool with many instanciated LXC containers.
    tags:
      icon: /images/lxc.png
    attributes:
      IP_List: { get_operation_output: [ SELF, Standard, start, IP_LIST ] }
    properties:
      containers_number:
        type: integer
        required: true
        description: number of desired containers
      hostpool_endpoint:
        type: string
        required: true
        constraints:
          - pattern: "(https?://)?([0-9a-z.-]+):([0-9]+)"

        description: endpoint of the hostpool plugin (http://ip:port)
      key_pem:
        type: string
        required: true
        description: cloudify manager key.pem (use textarea to set it)
    requirements:
      - host: # Overrides the parent host requirement
          capability: tosca.capabilities.Container
          node: tosca.nodes.Compute
          relationship: tosca.relationships.HostedOn
          occurrences: [1, 1]
          node_filter:
            capabilities:
              - tosca.capabilities.OperatingSystem:
                  properties:
                    - distribution: { equal: ubuntu }
    interfaces:
      Standard:
        create:
          implementation: scripts/create.sh
        configure:
          inputs:
            KEY_PEM: { get_property: [SELF, key_pem] }
          implementation: scripts/configure.sh
        start:
          inputs:
            MAX: { get_property: [SELF, containers_number] }
            HOST_PRIVATE_IP: {get_attribute: [HOST, ip_address]}
            HOSTPOOL_ENDPOINT: { get_property: [SELF, hostpool_endpoint] }
          implementation: scripts/start.sh
        stop:
          inputs:
            TAG: {get_attribute: [HOST, ip_address]}
            HOSTPOOL_ENDPOINT: { get_property: [SELF, hostpool_endpoint] }
          implementation: scripts/stop.sh
