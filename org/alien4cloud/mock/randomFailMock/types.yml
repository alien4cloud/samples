tosca_definitions_version: alien_dsl_2_0_0

metadata:
  template_name: org.alien4cloud.mock.randomFailMock
  template_version: 3.2.0-SNAPSHOT
  template_author: Atos

imports:
  - tosca-normative-types:1.0.0-ALIEN20
  - org.alien4cloud.mock.pub:2.2.0-SNAPSHOT
  - org.alien4cloud.mock.bash:2.2.0-SNAPSHOT  

description: >
  Mock types with bash implementations with start operation that randomly fails 

# TODO: apache port attribute should be used by RegistryConfigurer, and Generic & GenericHost
node_types:


  org.alien4cloud.mock.nodes.randomFailMock:
    description: |
      A software component that hosts MockComponent and which fails randoms on start operation.
    derived_from: org.alien4cloud.mock.bash.nodes.BashMock
    properties:
      duration:
        type: integer
        description: |
          The total duration for all operations (create, configure, start) in seconds.
          Each one is pondered in implementation.
        required: true
        default: 3
      variation:
        type: integer
        description: |
          The variation percent.
          20 means 20% of variation. Example, with an operation duration of 100s, if the
          variation is 20%, the duration will be randomized between 80s and 120s.
        required: true
        default: 20
        constraints:
          - in_range: [ 1, 100 ]
      log_length:
        type: integer
        default: 2000
        description: |
          Words count in the generated logs.
      comment:
        type: string
        required: false
        description: |
          A simple comment.
      description:
        type: string
        required: false
        description: |
          Searching expression in the monitored webpage (by default '200 OK'). If you want to monitor json like '"toto":"titi"' you need to escape special character so you need to write '\\"toto\\":\\"titi\\"'"
    interfaces:
      Standard:
        create:
          inputs:
            operation: "create"
            duration: { get_property: [ SELF, duration ] }
            comment: { get_property: [ SELF, comment ] }
          implementation: scripts/operation.sh
        configure:
          inputs:
            operation: "configure"
            duration: { get_property: [ SELF, duration ] }
            comment: { get_property: [ SELF, comment ] }
          implementation: scripts/operation.sh
        start:
          inputs:
            operation: "start"
            duration: { get_property: [ SELF, duration ] }
          implementation: scripts/randomfail.sh
        stop:
          inputs:
            operation: "stop"
            duration: { get_property: [ SELF, duration ] }
          implementation: scripts/operation.sh
        delete:
          inputs:
            operation: "delete"
            duration: { get_property: [ SELF, duration ] }
          implementation: scripts/operation.sh


          
