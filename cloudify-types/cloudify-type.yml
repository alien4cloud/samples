tosca_definitions_version: alien_dsl_1_4_0

metadata:
  template_name: org.alien4cloud.cloudify-types
  template_version: 1.0.0-SNAPSHOT
  template_author: alien4cloud

description: TOSCA template that contains a basic node type to install a cloudify manager.

imports:
  - tosca-normative-types:1.0.0-ALIEN14

node_types:
  org.alien4cloud.nodes.CloudifyManager:
    derived_from: tosca.nodes.SoftwareComponent
    description: Cloudify CLI and Manager in place installation.
    metadata:
      icon: images/cloudify.png
    properties:
      ssh_user:
        type: string
        required: true
      ssh_key_filename:
        type: string
        required: true
      keypair_name:
        type: string
        required: false
        description: Optional name of the key as known by the iaas (in case of iaas key).
      agents_user:
        type: string
        required: true
      admin_username:
        type: string
        required: true
      admin_password:
        type: string
        required: true
      iaas:
        type: string
        required: true
        constraints:
          - valid_values: ["aws","azure"]
      component_version:
        type: version
        default: 4.0.0-ga
        constraints:
          - valid_values: [ "4.0.0-ga" ]
      ssl_enabled:
        type: boolean
        default: true
        constraints:
          - valid_values: ["true","false"]
    attributes:
      manager_url: { concat: ["https://", get_attribute: [HOST, public_ip_address], ":", get_property: [SELF, cloudify_api_v3, port]] }
    capabilities:
      cloudify_modules:
        type: org.alien4cloud.capabilities.CloudifyManagerContainer
        occurrences: [ 0, UNBOUNDED ]
      cloudify_api_v3:
        type: org.alien4cloud.capabilities.CloudifyAPIv3
        occurrences: [ 0, UNBOUNDED ]
        properties:
          protocol: https
          port: 443 # set a default value for the port
    requirements:
      - host: # Overrides the parent host requirement to add a specific node_filter and add OS constraints as Impl is based on apt and so restricted to debian.
          capability: tosca.capabilities.Container
          node: tosca.nodes.Compute
          relationship: tosca.relationships.HostedOn
          occurrences: [1, 1]
          node_filter:
            capabilities:
              - tosca.capabilities.OperatingSystem:
                  properties:
                    - type: { equal: linux }
                    - architecture: { equal: x86_64 }
                    - distribution: { valid_values: [ "red hat", "centos", "rhel" ] }
              - tosca.capabilities.Container:
                  properties:
                    - num_cpus: { greater_or_equal: 2 }
                    - mem_size: { greater_or_equal: "4 Gib" }
    interfaces:
      Standard:
        create:
            inputs:
              SSH_KEY_FILENAME: { get_property: [SELF, ssh_key_filename] }
            implementation: scripts/install.sh
        configure:
          inputs:
            SSH_USER: { get_property: [SELF, ssh_user] }
            SSH_KEY_FILENAME: { get_property: [SELF, ssh_key_filename] }
            AGENTS_USER: { get_property: [SELF, agents_user] }
            SSL_ENABLED: { get_property: [SELF, ssl_enabled] }
            ADMIN_USERNAME: { get_property: [SELF, admin_username] }
            ADMIN_PASSWORD: { get_property: [SELF, admin_password] }
            VERSION: { get_property: [SELF, version] }
            PUBLIC_IP: { get_attribute: [HOST, public_ip_address] }
            PRIVATE_IP: { get_attribute: [HOST, ip_address] }
          implementation: scripts/configure.sh
        start: scripts/start.sh
        # stop: scripts/cli/stop.sh
    artifacts:
      - key_file:
          file: key.pem
          type: tosca.artifacts.File

  org.alien4cloud.nodes.CloudifyAwsConfiguration:
    derived_from: tosca.nodes.Root
    description: Configure the cloudify manager for aws.
    properties:
      aws_access_key:
        type: string
        required: true
      aws_secret_key:
        type: string
        required: true
      aws_region:
        type: string
        required: true
        default: eu-west-1
      agent_security_groups:
        type: string
        required: true
        default: sg-cffd98b6
        description: Comma separated list of security groups to use for agents.
    requirements:
      - cfy_manager:
          capability: org.alien4cloud.capabilities.CloudifyManagerContainer
          relationship: tosca.relationships.HostedOn
          occurrences: [1, 1]
    interfaces:
      Standard:
        create:
          inputs:
            AWS_ACCESS_KEY: { get_property: [SELF, aws_access_key] }
            AWS_SECRET_KEY: { get_property: [SELF, aws_secret_key] }
            AWS_REGION: { get_property: [SELF, aws_region] }
            AGENT_SECURITY_GROUP: { get_property: [SELF, agent_security_groups] }
            AGENT_SH_USER: { get_property: [HOST, agents_user] }
          implementation: scripts/aws_init_conf_file.sh
        start:
          inputs:
            SSH_KEY_FILENAME: { get_property: [HOST, ssh_key_filename] }
            KEYPAIR_NAME: { get_property: [HOST, keypair_name] }
            ADMIN_USERNAME: { get_property: [HOST, admin_username] }
            ADMIN_PASSWORD: { get_property: [HOST, admin_password] }
            IAAS: { get_property: [HOST, iaas] }
          implementation: scripts/aws_do_configure.sh
    artifacts:
      - python_script:
          file: scripts/iaas/cfy_config_iaas.py
          type: tosca.artifacts.File

  org.alien4cloud.nodes.CloudifyAzureConfiguration:
    derived_from: tosca.nodes.Root
    description: Configure the cloudify manager for azure.
    properties:
      subscription_id:
        type: string
        required: true
      tenant_id:
        type: string
        required: true
      client_id:
        type: string
        required: true
      client_secret:
        type: string
        required: true
      location:
        type: string
        required: true
        default: westeurope
    requirements:
      - cfy_manager:
          capability: org.alien4cloud.capabilities.CloudifyManagerContainer
          relationship: tosca.relationships.HostedOn
          occurrences: [1, 1]
    interfaces:
      Standard:
        create:
          inputs:
            SUBSCRIPTION_ID: { get_property: [SELF, subscription_id] }
            TENANT_ID: { get_property: [SELF, tenant_id] }
            CLIENT_ID: { get_property: [SELF, client_id] }
            CLIENT_SECRET: { get_property: [SELF, client_secret] }
            AGENT_SH_USER: { get_property: [HOST, agents_user] }
            LOCATION: { get_property: [SELF, location] }
          implementation: scripts/azure_init_conf_file.sh
        start:
          inputs:
            SSH_KEY_FILENAME: { get_property: [HOST, ssh_key_filename] }
            KEYPAIR_NAME: { get_property: [HOST, keypair_name] }
            ADMIN_USERNAME: { get_property: [HOST, admin_username] }
            ADMIN_PASSWORD: { get_property: [HOST, admin_password] }
            IAAS: { get_property: [HOST, iaas] }
          implementation: scripts/azure_do_configure.sh
    artifacts:
      - python_script:
          file: scripts/iaas/cfy_config_iaas.py
          type: tosca.artifacts.File


capability_types:
  org.alien4cloud.capabilities.CloudifyManagerContainer:
    derived_from: tosca.capabilities.Container
  org.alien4cloud.capabilities.CloudifyAPIv3:
    derived_from: tosca.capabilities.Endpoint

