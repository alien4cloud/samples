tosca_definitions_version: alien_dsl_1_4_0

metadata:
  template_name: org.alien4cloud.automation.a4c.webapp
  template_version: 1.4.0-SNAPSHOT
  template_author: alien4cloud

imports:
  - tosca-normative-types:1.0.0-ALIEN14
  - org.alien4cloud.automation.a4c.pub:1.4.0-SNAPSHOT
  - org.alien4cloud.lang.java.jdk.linux:1.4.0-SNAPSHOT
  - org.alien4cloud.storage.elasticsearch.pub:1.4.0-SNAPSHOT
  - org.alien4cloud.lang.java.jmx.jolokia:1.4.0-SNAPSHOT

node_types:
  org.alien4cloud.automation.a4c.webapp.nodes.Alien4Cloud:
    derived_from: org.alien4cloud.automation.a4c.pub.nodes.Alien4CloudService
    description: >
      The TOSCA Alien Node Type represents an alien webapp.
    tags:
      icon: /images/alien4cloud-logo.png
    properties:
      context_root:
        type: string
        default: "/"
      app_args:
        description: These args will be used as java program arguments.
        type: string
        required: false
        default: ""
      jvm_args:
        description: These args will be used as JVM arguments.
        type: string
        required: false
        default: ""
      # listen_port:
      #   description: The port on which A4C will listen.
      #   type: integer
      #   required: true
      #   default: 8080
      component_version:
        description: The version of A4C (important in create stage).
        type: version
        required: true
      data_dir:
        description: The location on the file system where A4C will store data (plugins, images ...).
        type: string
        required: true
        default: "/opt/alien4cloud/data"
      # server_protocol:
      #   type: string
      #   required: true
      #   default: http
      #   constraints:
      #     - valid_values: ["http", "https"]
      ca_passphrase:
        description: the provided CA cert passphrase
        type: string
        required: false
    capabilities:
      # consul:
      #   type: org.alien4cloud.consul.capabilities.ConsulClient
      # elasticsearch:
      #   type: org.alien4cloud.elasticsearch.capabilities.ElasticSearchClient
      # rest:
      #   type: org.alien4cloud.automation.a4c.pub.capabilities.A4cRestApi
      jolokia:
        type: org.alien4cloud.automation.a4c.pub.capabilities.JolokiaA4CEndpoint
      config:
        type: org.alien4cloud.automation.a4c.pub.capabilities.AlienConfigContainer
      http:
        type: org.alien4cloud.storage.elasticsearch.pub.capabilities.ElasticSearchRestAPI
    requirements:
      # This node is hosted on JDK, how can I express the fact that is must be hosted also on a ubuntu compute ?
      # Need for some inheritance in container capability ..
      #
      # - host: # Overrides the parent host requirement to add a specific node_filter and add OS constraints as Impl is based on yum and so restricted to centos.
      #     capability: tosca.capabilities.Container
      #     node: tosca.nodes.Compute
      #     relationship: tosca.relationships.HostedOn
      #     occurrences: [1, 1]
      #     node_filter:
      #       capabilities:
      #         - tosca.capabilities.OperatingSystem:
      #             properties:
      #               - type: { equal: linux }
      #               - architecture: { equal: x86_64 }
      #               - distribution: { valid_values: [ "ubuntu", "debian" ] }
      - elasticsearch:
          capability: org.alien4cloud.storage.elasticsearch.pub.capabilities.ElasticSearchTransportAPI
          relationship: org.alien4cloud.automation.a4c.webapp.relationships.AlienConnectToElasticSearch
          occurrences: [ 0, 1 ]
      # - consul:
      #     capability: org.alien4cloud.consul.capabilities.ConsulAgent
      #     relationship: org.alien4cloud.consul.relationships.ConnectToConsulAgent
      #     occurrences: [ 0, 1 ]
    interfaces:
      Standard:
        create:
          inputs:
            APPLICATION_URL: { get_property: [SELF, alien_url] }
            ALIEN_VERSION: { get_property: [SELF, component_version] }
            DATA_DIR: { get_property: [SELF, data_dir] }
          implementation: scripts/alien/install_alien.sh
        configure:
          inputs:
            ALIEN_IP: { get_attribute: [HOST, ip_address] }
            ALIEN_PORT: { get_property: [SELF, rest, port] }
            DATA_DIR: { get_property: [SELF, data_dir] }
            TLS_ENABLED: { get_property: [SELF, consul, tls_enabled] }
            KEY_STORE_PATH: { get_property: [SELF, consul, key_store_path] }
            TRUST_STORE_PATH: { get_property: [SELF, consul, trust_store_path] }
            KEYSTORE_PWD: { get_property: [SELF, consul, keystore_pwd] }
            SERVER_PROTOCOL: { get_property: [SELF, rest, protocol] }
            ADMIN_USERNAME: { get_property: [SELF, rest, user] }
            ADMIN_PASSWORD: { get_property: [SELF, rest, password] }
            CA_PASSPHRASE: { get_property: [SELF, ca_passphrase] }
          implementation: scripts/alien/config_alien.sh
        start:
          inputs:
            APP_ARGS: { get_property: [SELF, app_args] }
            JVM_ARGS: { get_property: [SELF, jvm_args] }
            ALIEN_IP: { get_attribute: [HOST, ip_address] }
            ALIEN_PORT: { get_property: [SELF, rest, port] }
            SERVER_PROTOCOL: { get_property: [SELF, rest, protocol] }
          implementation: scripts/alien/start_alien.sh
    artifacts:
      - bin:
          file: bin
          type: tosca.artifacts.File
      - ssl:
          file: ssl
          type: tosca.artifacts.File
      - commons:
          file: scripts/commons
          type: tosca.artifacts.File
      # - maven_artifact:
      #     file: alien4cloud:alien4cloud-dist:1.4.0-SNAPSHOT@tar.gz
      #     repository: fastconnect_nexus_snapshot
      #     type: tosca.artifacts.File
      # - alien_dist:
      #     file: alien4cloud-premium-dist-1.4.0-20170408.081834-13-dist.tar.gz
      #     repository: fastconnect_private_snapshot_http
      #     type: tosca.artifacts.File
      - alien_dist:
          # file: alien4cloud:alien4cloud-premium-dist:1.4.0-SNAPSHOT:dist@tar.gz
          # repository: fastconnect_nexus_private_snapshot
          type: tosca.artifacts.File
    attributes:
      alien_url: { concat: [get_property: [SELF, rest, protocol], "://", get_attribute: [HOST, public_ip_address], ":", get_property: [SELF, rest, port]] }

relationship_types:

  # org.alien4cloud.consul.relationships.ConnectToConsulAgent:
  #   derived_from: tosca.relationships.ConnectsTo
  #   valid_target_types: [org.alien4cloud.consul.capabilities.ConsulAgent]
  #   interfaces:
  #     Configure:
  #       pre_configure_source:
  #         inputs:
  #           # the capabity name is required here, but in fact I can't guess it
  #           # TOSCA limitation ?
  #           TLS_ENABLED: { get_property: [SOURCE, consul, tls_enabled] }
  #           CA_PASSPHRASE: { get_property: [SOURCE, consul, ca_passphrase] }
  #           AGENT_IP: { get_attribute: [TARGET, ip_address] }
  #           AGENT_API_PORT: { get_property: [TARGET, consul_agent, api_port] }
  #         implementation: scripts/ConnectToConsulAgent/pre_configure_source.sh
  #   artifacts:
  #     - ssl:
  #         file: ssl
  #         type: tosca.artifacts.File
  #     - commons:
  #         file: scripts/commons
  #         type: tosca.artifacts.File
  org.alien4cloud.automation.a4c.webapp.relationships.AlienConnectToElasticSearch:
    derived_from: tosca.relationships.ConnectsTo
    valid_target_types: [org.alien4cloud.storage.elasticsearch.pub.capabilities.ElasticSearchTransportAPI]
    interfaces:
      Configure:
        pre_configure_source:
          inputs:
            ES_IP: { get_attribute: [TARGET, ip_address] }
            ES_PORT: { get_property: [TARGET, elasticsearch, port] }
            CLUSTER_NAME: { get_property: [TARGET, cluster_name] }
          implementation: scripts/elasticsearch/ConnectToElasticSearch/pre_configure_source.sh
    artifacts:
      - commons:
          file: scripts/commons
          type: tosca.artifacts.File
  # org.alien4cloud.samba.relationships.ConnectsToSambaServer:
  #   derived_from: tosca.relationships.ConnectsTo
  #   valid_target_types: [org.alien4cloud.samba.capabilities.SambaServer]
  #   properties:
  #     mount_point:
  #       type: string
  #       default: "/var/alien4cloud"
  #   interfaces:
  #     Configure:
  #       add_target:
  #         inputs:
  #           SAMBA_SERVER_IP: { get_attribute: [TARGET, ip_address] }
  #           SHARE_NAME: { get_property: [TARGET, share_name] }
  #           MOUNT_POINT: { get_property: [SELF, mount_point] }
  #         implementation: scripts/smbClient/add_target.sh
  #       remove_target:
  #         inputs:
  #           MOUNT_POINT: { get_property: [SELF, mount_point] }
  #         implementation: scripts/smbClient/remove_target.sh
  #   artifacts:
  #     - commons:
  #         file: scripts/commons
  #         type: tosca.artifacts.File
