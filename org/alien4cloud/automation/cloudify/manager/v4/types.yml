tosca_definitions_version: alien_dsl_1_4_0

metadata:
  template_name: org.alien4cloud.automation.cloudify.manager.v4
  template_version: 1.4.0-SNAPSHOT
  template_author: alien4cloud

description: TOSCA template that contains a basic node type to install a cloudify manager.

imports:
  - tosca-normative-types:1.0.0-ALIEN14
  - org.alien4cloud.automation.cloudify.manager.pub:1.4.0-SNAPSHOT
  - org.alien4cloud.messaging.rabbitmq.pub:1.4.0-SNAPSHOT
  - org.alien4cloud.db.postgresql.pub:1.4.0-SNAPSHOT
  - org.alien4cloud.storage.elasticsearch.pub:1.4.0-SNAPSHOT

node_types:

  org.alien4cloud.automation.cloudify.manager.v4.nodes.CloudifyManager:
    derived_from: org.alien4cloud.automation.cloudify.manager.pub.nodes.CloudifyManagerService
    description: Cloudify CLI and Manager in place installation.
    properties:
      ssh_user:
        type: string
        required: true
        description: User of the manager machine to be used by the cloudify manager.
      ssh_key_filename:
        type: string
        required: true
        description: Name of the file in which we will store the manager ssh key (see required artifact).
      keypair_name:
        type: string
        required: false
        description: Optional name of the key as known by the iaas (in case of iaas key).
      agents_user:
        type: string
        required: true
        description: Default ssh user for agents.
      component_version:
        type: version
        default: 4.1.1
        constraints:
          - valid_values: [ "4.0.1-ga", "4.1.0", "4.1.1" ]
    attributes:
      manager_url: { concat: ["https://", get_attribute: [HOST, public_ip_address], ":", get_property: [SELF, cloudify_api_v3, port]] }
    capabilities:
      cloudify_modules:
        type: org.alien4cloud.automation.cloudify.manager.pub.capabilities.CloudifyManagerContainer
        occurrences: [ 0, UNBOUNDED ]
      rabbitmq_management:
        type: org.alien4cloud.messaging.rabbitmq.pub.capabilities.RabbitMQManagementEndpoint
        occurrences: [ 0, UNBOUNDED ]
        properties:
          protocol: http
          port: 15672
          user: cloudify
          password: c10udify
      postgresql:
        type: org.alien4cloud.db.postgresql.pub.PostgresqlEndpoint
        occurrences: [ 0, UNBOUNDED ]
        properties:
          port: 5432
          user: cloudify
          password: cloudify
      diamond_collector:
        type: org.alien4cloud.automation.cloudify.manager.pub.capabilities.CloudifyMonitorEndpoint
        occurrences: [ 0, 1 ]
    requirements:
      - host: # Overrides the parent host requirement to add a specific node_filter and add OS constraints as Impl is based on apt and so restricted to debian.
          capability: tosca.capabilities.Container
          node: tosca.nodes.Compute
          relationship: tosca.relationships.HostedOn
          occurrences: [1, 1]
          node_filter:
            capabilities:
              - tosca.capabilities.OperatingSystem:
                  properties:
                    - type: { equal: linux }
                    - architecture: { equal: x86_64 }
                    - distribution: { valid_values: [ "red hat", "centos", "rhel" ] }
              - tosca.capabilities.Container:
                  properties:
                    - num_cpus: { greater_or_equal: 2 }
                    - mem_size: { greater_or_equal: "4 Gib" }
    interfaces:
      Standard:
        create:
          inputs:
            CFY_VERSION: { get_property: [SELF, component_version] }
            SSH_KEY_FILENAME: { get_property: [SELF, ssh_key_filename] }
          implementation: scripts/install.sh
        configure:
          inputs:
            CFY_VERSION: { get_property: [SELF, component_version] }
            SSH_USER: { get_property: [SELF, ssh_user] }
            SSH_KEY_FILENAME: { get_property: [SELF, ssh_key_filename] }
            AGENTS_USER: { get_property: [SELF, agents_user] }
            ADMIN_USERNAME: { get_property: [SELF, cloudify_api_v3, admin_username] }
            ADMIN_PASSWORD: { get_property: [SELF, cloudify_api_v3, admin_password] }
            VERSION: { get_property: [SELF, version] }
            PUBLIC_IP: { get_attribute: [HOST, public_ip_address] }
            PRIVATE_IP: { get_attribute: [HOST, ip_address] }
          implementation: scripts/configure.sh
        start:
          inputs:
            CFY_VERSION: { get_property: [SELF, component_version] }
            PUBLIC_IP: { get_attribute: [HOST, public_ip_address] }
            ADMIN_USERNAME: { get_property: [SELF, cloudify_api_v3, admin_username] }
            ADMIN_PASSWORD: { get_property: [SELF, cloudify_api_v3, admin_password] }
            API_PORT: { get_property: [SELF, cloudify_api_v3, port] }
            API_PROTOCOL: https
            MAX_INSTANCES: { get_property: [HOST, scalable, max_instances] }
          implementation: scripts/start.sh
    artifacts:
      - key_file:
          file: key.pem
          type: tosca.artifacts.File
          description: This artifact contains the manager ssh key. Note that by default it will also be used
      - cluster_python_script:
          file: scripts/cluster.py
          type: tosca.artifacts.File
          description: This artifact is the python script that configure the cluster. It should not be overriden.
      - ssl_ui_conf_python_script:
          file: scripts/conf_ip.py
          type: tosca.artifacts.File
          description: This artifact is the python script that configure the cluster. It should not be overriden.

  org.alien4cloud.automation.cloudify.manager.v4.nodes.CloudifySSHKey:
    derived_from: tosca.nodes.Root
    description: An SSH key to install on the cloudify manager.
    properties:
      key_file_name:
        type: string
        required: true
        description: Name of the key file name to be saved on the cloudify manager (for example user_name.pem).
      keypair_name:
        type: string
        required: false
        description: Optional name of the key as known by the iaas.
    capabilities:
      installed_key:
        type: org.alien4cloud.automation.cloudify.manager.pub.capabilities.CloudifySSHKey
        occurrences: [ 0, UNBOUNDED ]
    requirements:
      - cfy_manager:
          capability: org.alien4cloud.automation.cloudify.manager.pub.capabilities.CloudifyManagerContainer
          relationship: tosca.relationships.HostedOn
          occurrences: [1, 1]
    attributes:
      key_file_path: { get_operation_output: [ SELF, Standard, create, KEY_FILE_PATH ] }
    interfaces:
      Standard:
        create:
          inputs:
            SSH_KEY_FILENAME: { get_property: [SELF, key_file_name] }
          implementation: scripts/install_key.sh
    artifacts:
      - key_file:
          file: key.pem
          type: tosca.artifacts.File

  org.alien4cloud.automation.cloudify.manager.v4.nodes.CloudifyAwsConfiguration:
    derived_from: org.alien4cloud.automation.cloudify.manager.pub.nodes.CloudifyIaaSConfiguration
    description: Configure the cloudify manager for aws.
    properties:
      aws_access_key:
        type: string
        required: true
        description: The aws access key of the account to use to start aws instances.
      aws_secret_key:
        type: string
        required: true
        description: The aws secret key of the account to use to start aws instances.
      aws_region:
        type: string
        required: true
        default: eu-west-1
        description: The aws region to use to start aws instances.
      agent_security_groups:
        type: string
        required: true
        default: sg-cffd98b6
        description: Comma separated list of security groups to use for agents.
    requirements:
      - agent_key:
          capability: org.alien4cloud.automation.cloudify.manager.pub.capabilities.CloudifySSHKey
          relationship: org.alien4cloud.automation.cloudify.manager.v4.relationships.ConfigureAWSKey
          occurrences: [0, 1]
    interfaces:
      Standard:
        create:
          inputs:
            AWS_ACCESS_KEY: { get_property: [SELF, aws_access_key] }
            AWS_SECRET_KEY: { get_property: [SELF, aws_secret_key] }
            AWS_REGION: { get_property: [SELF, aws_region] }
            AGENT_SECURITY_GROUP: { get_property: [SELF, agent_security_groups] }
            AGENT_SH_USER: { get_property: [HOST, agents_user] }
          implementation: scripts/aws_init_conf_file.sh
        start:
          inputs:
            CFY_VERSION: { get_property: [HOST, component_version] }
            SSH_KEY_FILENAME: { get_property: [HOST, ssh_key_filename] }
            KEYPAIR_NAME: { get_property: [HOST, keypair_name] }
            ADMIN_USERNAME: { get_property: [HOST, cloudify_api_v3, admin_username] }
            ADMIN_PASSWORD: { get_property: [HOST, cloudify_api_v3, admin_password] }
          implementation: scripts/aws_do_configure.sh
    artifacts:
      - python_script:
          file: scripts/iaas/cfy_config_iaas.py
          type: tosca.artifacts.File

  org.alien4cloud.automation.cloudify.manager.v4.nodes.CloudifyAzureConfiguration:
    derived_from: org.alien4cloud.automation.cloudify.manager.pub.nodes.CloudifyIaaSConfiguration
    description: Configure the cloudify manager for azure.
    properties:
      subscription_id:
        type: string
        required: true
      tenant_id:
        type: string
        required: true
      client_id:
        type: string
        required: true
      client_secret:
        type: string
        required: true
      location:
        type: string
        required: true
        default: westeurope
    interfaces:
      Standard:
        create:
          inputs:
            SUBSCRIPTION_ID: { get_property: [SELF, subscription_id] }
            TENANT_ID: { get_property: [SELF, tenant_id] }
            CLIENT_ID: { get_property: [SELF, client_id] }
            CLIENT_SECRET: { get_property: [SELF, client_secret] }
            LOCATION: { get_property: [SELF, location] }
            AGENT_SH_USER: { get_property: [HOST, agents_user] }
          implementation: scripts/azure_init_conf_file.sh
        start:
          inputs:
            CFY_VERSION: { get_property: [HOST, component_version] }
            SSH_KEY_FILENAME: { get_property: [HOST, ssh_key_filename] }
            KEYPAIR_NAME: { get_property: [HOST, keypair_name] }
            ADMIN_USERNAME: { get_property: [HOST, cloudify_api_v3, admin_username] }
            ADMIN_PASSWORD: { get_property: [HOST, cloudify_api_v3, admin_password] }
          implementation: scripts/azure_do_configure.sh
    artifacts:
      - python_script:
          file: scripts/iaas/cfy_config_iaas.py
          type: tosca.artifacts.File

  org.alien4cloud.automation.cloudify.manager.v4.nodes.CloudifyOpenstackConfiguration:
    derived_from: org.alien4cloud.automation.cloudify.manager.pub.nodes.CloudifyIaaSConfiguration
    description: Configure the cloudify manager for openstack.
    properties:
      keystone_url:
        type: string
        required: true
        description: |
          The URL of keystone url (i.e: http://129.185.67.11:5000/v2.0)
      username:
        type: string
        required: true
        description: The login to connect to openstack
      password:
        type: string
        required: true
        description: The password to connect to openstack
      region:
        type: string
        required: true
        default: RegionOne
        description: The openstack region to use to create instances
      tenant_name:
        type: string
        required: true
        description: The openstack tenant to use to create instances
      agents_keypair_name:
        type: string
        required: true
        description: The keypair name to connect to the agents
      agents_security_group_name:
        type: string
        required: true
        description: The security group name to use on agents
      management_network_id:
        type: string
        required: true
        description: The network id attached to the manager
      management_network_name:
        type: string
        required: true
        description: The network name attached to the manager
    requirements:
      - agent_key:
          capability: org.alien4cloud.automation.cloudify.manager.pub.capabilities.CloudifySSHKey
          relationship: org.alien4cloud.automation.cloudify.manager.v4.relationships.ConfigureOpenstackKey
          occurrences: [0, 1]
    interfaces:
      Standard:
        create:
          inputs:
            KEYSTONE_URL: { get_property: [SELF, keystone_url] }
            USERNAME: { get_property: [SELF, username] }
            PASSWORD: { get_property: [SELF, password] }
            REGION: { get_property: [SELF, region] }
            TENANT_NAME: { get_property: [SELF, tenant_name] }
            AGENT_SH_USER: { get_property: [HOST, agents_user] }
            AGENTS_KEYPAIR_NAME: { get_property: [SELF, agents_keypair_name] }
            AGENTS_SECURITY_GROUP_NAME: { get_property: [SELF, agents_security_group_name] }
            MANAGEMENT_NETWORK_ID: { get_property: [SELF, management_network_id] }
            MANAGEMENT_NETWORK_NAME: { get_property: [SELF, management_network_name] }
          implementation: scripts/openstack_init_conf_file.sh
        start:
          inputs:
            CFY_VERSION: { get_property: [HOST, component_version] }
            SSH_KEY_FILENAME: { get_property: [HOST, ssh_key_filename] }
            KEYPAIR_NAME: { get_property: [HOST, keypair_name] }
            ADMIN_USERNAME: { get_property: [HOST, cloudify_api_v3, admin_username] }
            ADMIN_PASSWORD: { get_property: [HOST, cloudify_api_v3, admin_password] }
          implementation: scripts/openstack_do_configure.sh
    artifacts:
      - python_script:
          file: scripts/iaas/cfy_config_iaas.py
          type: tosca.artifacts.File

relationship_types:
  org.alien4cloud.automation.cloudify.manager.v4.relationships.ConfigureAWSKey:
    derived_from: tosca.relationships.Root
    interfaces:
      Configure:
        pre_configure_source:
          inputs:
            SSH_KEY_FILENAME: { get_property: [TARGET, key_file_name] }
            KEYPAIR_NAME: { get_property: [TARGET, keypair_name] }
          implementation:  scripts/aws_configure_key.sh

  org.alien4cloud.automation.cloudify.manager.v4.relationships.ConfigureOpenstackKey:
    derived_from: tosca.relationships.Root
    interfaces:
      Configure:
        pre_configure_source:
          inputs:
            SSH_KEY_FILENAME: { get_property: [TARGET, key_file_name] }
            KEYPAIR_NAME: { get_property: [TARGET, keypair_name] }
          implementation:  scripts/openstack_configure_key.sh
